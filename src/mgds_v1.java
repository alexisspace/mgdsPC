
import java.io.*;
import javax.swing.JFileChooser;
import com.fazecast.jSerialComm.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author alexis
 */
public class mgds_v1 extends javax.swing.JFrame {

    // Constants
    static final int FWLOAD_OK = 0x00;
    static final int FWLOAD_FAILED = 0x01;
    static final int FWLOAD_ERROR_INSUFFICIENT_DATA = 0x02;
    static final int FWLOAD_ERROR_CSUM = 0x03;
    static final int FWLOAD_ERROR_PKT_TIMEOUT = 0x04;
    static final int FWLOAD_ERROR_NO_USB = 0x05;

    static final int FWLOAD_ERROR_IN_FWCSUM = 0x10;

    static final int FWLOAD_PACKET_TYPE_FWINFO = 0x35;
    static final int FWLOAD_PACKET_TYPE_FWDATA = 0x46;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_INFO_REQ = 0x5C;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_INFO_RESP = 0x5D;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG = 0x5E;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_ACK = 0x5F;
    static final int FWLOAD_PACKET_SET_RTC = 0x67;
    static final int FWLOAD_PACKET_ERASE_LOGS = 0x82;
    static final int FWLOAD_PACKET_GET_DEVID = 0x95;
    static final int FWLOAD_PACKET_READ_DEVID = 0x96;
    static final int FWLOAD_PACKET_SET_DEVID = 0x97;

    static final int FWLOAD_PACKET_TYPE_ACK = 0xE5;

    static final int FWLOAD_PKT_TYPE_IDX = 2;
    static final int FWLOAD_PKT_FW_PKT_CNT_IDX = 3;
    static final int FWLOAD_PKT_FW_PAYLOAD_SIZE_IDX = 5;
    static final int FWLOAD_PKT_FW_PAYLOAD_IDX = 6;

    static final int FWLOAD_ACK_PKT_SIZE = 7;

    static final int FWLOAD_PKT_SIZE = 64;
    static final int FWLOAD_PKT_SIGN_B0 = 0xA5;
    static final int FWLOAD_PKT_SIGN_B1 = 0x5A;

    SerialPort[] ports = null;
    int openedPort = -1;
    PacketListener listener = new PacketListener();
    byte[] procBuffer = new byte[FWLOAD_PKT_SIZE];
    byte[] outBuffer = new byte[FWLOAD_PKT_SIZE];
    boolean newPacket = false;
    long totalLogs = 0;
    long logReq = 0;

    /**
     * Creates new form mgds_v1
     */
    public mgds_v1() {
        initComponents();
        createObjects();
    }

    private void createObjects() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        readButton = new javax.swing.JButton();
        saveToButton = new javax.swing.JButton();
        eraseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        fileButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        closePortButton = new javax.swing.JButton();

        jFileChooser1.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Logger Data"));

        readButton.setText("Read");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        saveToButton.setText("Save To");
        saveToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToButtonActionPerformed(evt);
            }
        });

        eraseButton.setText("Erase");
        eraseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(readButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveToButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eraseButton)
                .addGap(0, 189, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readButton)
                    .addComponent(saveToButton)
                    .addComponent(eraseButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("MCU Firmware"));

        fileButton.setText("File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(fileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileButton)
                    .addComponent(updateButton))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Console Output"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("COM Port Settings"));

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closePortButton.setText("Close Port");
        closePortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closePortButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(closePortButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            System.out.println("Saving to: " + file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveToButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            System.out.println("Openning: " + file.getAbsolutePath());// + file.getName());
                /*
             try {
             // What to do with the file, e.g. display it in a TextArea
             textarea.read( new FileReader( file.getAbsolutePath() ), null );
             } catch (IOException ex) {
             System.out.println("problem accessing file"+file.getAbsolutePath());
             }
             */
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        //jTextArea1.append("Hello1\n");
        //jTextArea1.append("Hello2\n");
    }//GEN-LAST:event_updateButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        ports = SerialPort.getCommPorts();

        jTextArea1.append(String.format("Number of ports detedted: %d COM ports.\n", ports.length));
        for (int k = 0; k < ports.length; k++) {
            jTextArea1.append(String.format("%s\n", ports[k].getDescriptivePortName()));
        }
        jTextArea1.append("System given ports names:\n");
        for (int k = 0; k < ports.length; k++) {
            jTextArea1.append(String.format("%s\n", ports[k].getSystemPortName()));
            if (ports[k].getSystemPortName().equals("COM11")) {
                jTextArea1.append(String.format("COM11 found\nOpening port %d\n", k));
                if (ports[k].openPort()) {
                    openedPort = k;
                    jTextArea1.append(String.format("Port %d opened successfully\n", openedPort));
                    ports[openedPort].addDataListener(listener);

                } else {
                    jTextArea1.append("Can not open the port\n");
                }
            }
        }


    }//GEN-LAST:event_openButtonActionPerformed

    private void closePortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePortButtonActionPerformed
        // TODO add your handling code here:
        if (openedPort > 0) {
            jTextArea1.append(String.format("openedPort = %d\n", openedPort));
            jTextArea1.append(String.format("ports.length = %d\n", ports.length));
            ports[openedPort].removeDataListener();
            if (ports[openedPort].closePort()) {
                //System.out.println("Port closed.");
                jTextArea1.append(String.format("Port %d closed successfully\n", openedPort));
            } else {
                System.out.println("Can not close the port.");
            }
        } else {
            System.out.println("No COM port was opened.");
        }
    }//GEN-LAST:event_closePortButtonActionPerformed

    private void eraseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseButtonActionPerformed
        // TODO add your handling code here:
        byte[] byteArray = new byte[2];

        byteArray[0] = (byte) FWLOAD_PKT_SIGN_B0;
        jTextArea1.append(String.format("Constant value: %x\n", byteArray[0]));
    }//GEN-LAST:event_eraseButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        // TODO add your handling code here:
        startLogging(outBuffer); // Send command to read log data
    }//GEN-LAST:event_readButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mgds_v1().setVisible(true);
                //mgds_v1().this.jTextArea1.append("Hello");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closePortButton;
    private javax.swing.JButton eraseButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton readButton;
    private javax.swing.JButton saveToButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    class MyCustomFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "CSV files (*.csv)";
        }
    }

    private final class PacketListener implements SerialPortPacketListener {

        @Override
        public int getListeningEvents() {
            return SerialPort.LISTENING_EVENT_DATA_RECEIVED;
        }

        @Override
        public int getPacketSize() {
            return FWLOAD_PKT_SIZE;
        }

        @Override
        public void serialEvent(SerialPortEvent event) {
            byte[] tempBuffer = event.getReceivedData();
            processRawPacket(tempBuffer);

            //   System.out.print((char)newData[i]);
            //System.out.println("\n");
        }
    }

    private void processRawPacket(byte[] data) {
        int packetType = -1;

        System.arraycopy(data, 0, procBuffer, 0, FWLOAD_PKT_SIZE);
        newPacket = false;
        packetType = procBuffer[2] & 0xFF;
        if (!(chkCsumFWLOAD(procBuffer) == FWLOAD_OK)) {
            // Invalid checksum, no process this packet
            jTextArea1.append(String.format("Invalid checksum on packet type: %x\n", packetType));
            return;
        }
        switch (packetType) {
            case FWLOAD_PACKET_DOWNLOAD_LOG_INFO_RESP:

                totalLogs = procBuffer[FWLOAD_PKT_TYPE_IDX + 5] & 0xFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 4] << 8) & 0x0000FFFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 3] << 16) & 0x00FFFFFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 2] << 24) & 0xFFFFFFFF;
                logReq = 0;
                // Send ack from current RESP and request FIRST log packet
                sendLogReq(outBuffer, logReq);
                break;

            case FWLOAD_PACKET_DOWNLOAD_LOG:
                // Convert and process log data packet
                processLogPacket(procBuffer);
                logReq++;
                if (logReq <= totalLogs) {
                    //sendLogReq(outBuffer, logReq);
                    sendLogReq(outBuffer, logReq);
                } else {
                    // All logs have been read
                    totalLogs = -1;
                }
                break;
        }
    }

    //--------------------------------------------------------------------------
    private void sendLogReq(byte[] buffer, long logNum) {

        clrPktFWLOAD(buffer);
        buffer[FWLOAD_PKT_TYPE_IDX] = (byte) FWLOAD_PACKET_DOWNLOAD_LOG_ACK;
        // Add requested Log packet number
        buffer[FWLOAD_PKT_TYPE_IDX + 1] = (byte) ((logNum >> 24) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 2] = (byte) ((logNum >> 16) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 3] = (byte) ((logNum >> 8) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 4] = (byte) (logNum & 0xFF);
        addCsumFWLOAD(buffer);
        if (openedPort >= 0) {
            if (ports[openedPort].isOpen()) {
                ports[openedPort].writeBytes(buffer, FWLOAD_PKT_SIZE);
            }else{
                jTextArea1.append(String.format("Not opened Port"));
            }
        }else{
            jTextArea1.append(String.format("Not valid Port"));
        }
    }
    
    //--------------------------------------------------------------------------
    private void startLogging(byte[] buffer){
        clrPktFWLOAD(buffer);
        buffer[FWLOAD_PKT_TYPE_IDX] = (byte) FWLOAD_PACKET_DOWNLOAD_LOG_INFO_REQ;
        addCsumFWLOAD(buffer);
        if (openedPort >= 0) {
            if (ports[openedPort].isOpen()) {
                ports[openedPort].writeBytes(buffer, FWLOAD_PKT_SIZE);
            }else{
                jTextArea1.append(String.format("Not opened Port"));
            }
        }else{
            jTextArea1.append(String.format("Not valid Port"));
        }        
    }

    //--------------------------------------------------------------------------
    private void processLogPacket(byte[] buffer) {

    }

    //--------------------------------------------------------------------------
    void clrPktFWLOAD(byte[] pkt_data) {
        int k;
        for (k = 0; k < (FWLOAD_PKT_SIZE); k++) {
            pkt_data[k] = 0x00;
        }
        // add packet sign - preambule
        pkt_data[0] = (byte) FWLOAD_PKT_SIGN_B0;
        pkt_data[1] = (byte) FWLOAD_PKT_SIGN_B1;
    }

    //--------------------------------------------------------------------------
    private int chkCsumFWLOAD(byte[] buff) {/// validate packet checksum 
        int k;
        byte[] csum = {0x00, 0x00};
        byte flag = 0x00;

        for (k = 0; k < ((FWLOAD_PKT_SIZE) - 2); k++) {
            csum[flag] ^= buff[k];
            flag ^= 0x01;
        }

        if ((csum[0] == buff[(FWLOAD_PKT_SIZE) - 2]) && (csum[1] == buff[(FWLOAD_PKT_SIZE) - 1])) {
            return (FWLOAD_OK);
        }

        return (FWLOAD_ERROR_CSUM);
    }

    //--------------------------------------------------------------------------    
    private void addCsumFWLOAD(byte[] pkt_data) {
        int k;
        pkt_data[(FWLOAD_PKT_SIZE) - 2] = 0x00;
        pkt_data[(FWLOAD_PKT_SIZE) - 1] = 0x00;

        for (k = 0; k < ((FWLOAD_PKT_SIZE) - 2); k += 2) {
            pkt_data[(FWLOAD_PKT_SIZE) - 2] ^= pkt_data[k];
            pkt_data[(FWLOAD_PKT_SIZE) - 1] ^= pkt_data[k + 1];
        }
    }

}
