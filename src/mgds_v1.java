
import java.io.*;
import javax.swing.JFileChooser;
import com.fazecast.jSerialComm.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import javax.swing.JComboBox;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author alexis
 */
public class mgds_v1 extends javax.swing.JFrame {

    // Constants
    static final int LOGGER_RECORD_SIZE = 47;
    static final int FWLOAD_OK = 0x00;
    static final int FWLOAD_FAILED = 0x01;
    static final int FWLOAD_ERROR_INSUFFICIENT_DATA = 0x02;
    static final int FWLOAD_ERROR_CSUM = 0x03;
    static final int FWLOAD_ERROR_PKT_TIMEOUT = 0x04;
    static final int FWLOAD_ERROR_NO_USB = 0x05;

    static final int FWLOAD_ERROR_IN_FWCSUM = 0x10;

    static final int FWLOAD_PACKET_TYPE_FWINFO = 0x35;
    static final int FWLOAD_PACKET_TYPE_FWDATA = 0x46;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_INFO_REQ = 0x5C;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_INFO_RESP = 0x5D;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG = 0x5E;
    static final int FWLOAD_PACKET_DOWNLOAD_LOG_ACK = 0x5F;
    static final int FWLOAD_PACKET_SET_RTC = 0x67;
    static final int FWLOAD_PACKET_ERASE_LOGS = 0x82;
    static final int FWLOAD_PACKET_GET_DEVID = 0x95;
    static final int FWLOAD_PACKET_READ_DEVID = 0x96;
    static final int FWLOAD_PACKET_SET_DEVID = 0x97;

    static final int FWLOAD_PACKET_TYPE_ACK = 0xE5;

    static final int FWLOAD_PKT_TYPE_IDX = 2;
    static final int FWLOAD_PKT_FW_PKT_CNT_IDX = 3;
    static final int FWLOAD_PKT_FW_PAYLOAD_SIZE_IDX = 5;
    static final int FWLOAD_PKT_FW_PAYLOAD_IDX = 6;

    static final int FWLOAD_ACK_PKT_SIZE = 7;

    static final int FWLOAD_PKT_SIZE = 64;
    static final int FWLOAD_PKT_SIGN_B0 = 0xA5;
    static final int FWLOAD_PKT_SIGN_B1 = 0x5A;

    // My definitions
    static final int RTC_STRING_LENGTH = 20;
    static final int FWLOAD_PKT_LOG_PKT_NUM_IDX = 4;
    static final int FWLOAD_PKT_LOG_PAYLOAD_IDX = 8;
    static final int FWLOAD_PKT_LOG_BATTERY_IDX = FWLOAD_PKT_LOG_PAYLOAD_IDX + 20;
    static final int FWLOAD_PKT_LOG_ERROR_IDX   = FWLOAD_PKT_LOG_BATTERY_IDX + 1;
    static final int FWLOAD_PKT_LOG_SENSORS_IDX = FWLOAD_PKT_LOG_ERROR_IDX + 4;
    static final int FWLOAD_PKT_LOG_PRESSURE_IDX = FWLOAD_PKT_LOG_SENSORS_IDX + 18;
    static final int FWLOAD_PKT_LOG_TEMPERATURE_IDX = FWLOAD_PKT_LOG_PRESSURE_IDX + 2;
    
    
    MyOpenFilter openFileFilter = new MyOpenFilter();
    MySaveFilter saveFileFilter = new MySaveFilter();
    SerialPort[] ports = null;
    File recordFile = null;
    File programFile = null;
    PrintWriter outputStream = null;
    Path tempPath = null;
    PrintWriter outputStream2 = null;
    Path tempPath2 = null;
    String selectedPortName = null;
    String recordFormat = "%s,%d,0x%x,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d%f\n";
    int openedPort = -1;
    int selectedPortIndex = -1;
    int logPacketErrorCounter = 0;
    PacketListener listener = new PacketListener();
    byte[] procBuffer = new byte[FWLOAD_PKT_SIZE];
    byte[] outBuffer = new byte[FWLOAD_PKT_SIZE];
    boolean newPacket = false;
    boolean logAvailable = false;
    long totalLogs = 0;
    long logReq = 0;

    /**
     * Creates new form mgds_v1
     */
    public mgds_v1() {
        initComponents();
        createObjects();
    }

    private void createObjects() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        readButton = new javax.swing.JButton();
        saveToButton = new javax.swing.JButton();
        eraseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        fileButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        closePortButton = new javax.swing.JButton();
        portsComboBox = new javax.swing.JComboBox();
        detectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Logger Data"));

        readButton.setText("Read");
        readButton.setEnabled(false);
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        saveToButton.setText("Save To");
        saveToButton.setEnabled(false);
        saveToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToButtonActionPerformed(evt);
            }
        });

        eraseButton.setText("Erase");
        eraseButton.setEnabled(false);
        eraseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(readButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveToButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eraseButton)
                .addGap(0, 189, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readButton)
                    .addComponent(saveToButton)
                    .addComponent(eraseButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("MCU Firmware"));

        fileButton.setText("File");
        fileButton.setEnabled(false);
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(fileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileButton)
                    .addComponent(updateButton))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Console Output"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("COM Port Settings"));

        openButton.setText("Open");
        openButton.setEnabled(false);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closePortButton.setText("Close Port");
        closePortButton.setEnabled(false);
        closePortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePortButtonActionPerformed(evt);
            }
        });

        portsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsComboBoxActionPerformed(evt);
            }
        });

        detectButton.setText("Detect");
        detectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(detectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closePortButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(portsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(detectButton)
                    .addComponent(portsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(closePortButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToButtonActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setFileFilter(saveFileFilter);
        int returnVal = jFileChooser1.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            recordFile = jFileChooser1.getSelectedFile();
            if(logAvailable){
                // Copy temp log file to location selected by user
                try {
                    Files.copy(tempPath.toAbsolutePath(), Paths.get(recordFile.getAbsolutePath()), REPLACE_EXISTING);
                    System.out.println("Saving to: " + recordFile.getAbsolutePath());
                } catch (IOException error) {
                    jTextArea1.append(String.format("%s\n", error));
                }
            }
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveToButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setFileFilter(openFileFilter);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            programFile = jFileChooser1.getSelectedFile();
            System.out.println("Openning: " + programFile.getAbsolutePath());// + file.getName());
                /*
             try {
             // What to do with the file, e.g. display it in a TextArea
             textarea.read( new FileReader( file.getAbsolutePath() ), null );
             } catch (IOException ex) {
             System.out.println("problem accessing file"+file.getAbsolutePath());
             }
             */
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        //jTextArea1.append("Hello1\n");
        //jTextArea1.append("Hello2\n");
    }//GEN-LAST:event_updateButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        if(selectedPortIndex >= 0){
            if (ports[selectedPortIndex].openPort()) {
                openedPort = selectedPortIndex;
                jTextArea1.append(String.format("Port %d opened successfully\n", openedPort));
                ports[openedPort].addDataListener(listener);
                
                // Enable some buttons
                closePortButton.setEnabled(true);
                
                fileButton.setEnabled(true);
                updateButton.setEnabled(true);
                readButton.setEnabled(true);
                eraseButton.setEnabled(true);
                
                // Disable
                detectButton.setEnabled(false);
                openButton.setEnabled(false);
                
            } else {
                jTextArea1.append("Can not open the port\n");
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void closePortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePortButtonActionPerformed
        // TODO add your handling code here:
        if (openedPort > 0) {
            jTextArea1.append(String.format("openedPort = %d\n", openedPort));
            jTextArea1.append(String.format("ports.length = %d\n", ports.length));
            ports[openedPort].removeDataListener();
            if (ports[openedPort].closePort()) {
                //System.out.println("Port closed.");
                jTextArea1.append(String.format("Port %d closed successfully\n", openedPort));
                openedPort = -1;
                
                // Disable relevant buttons
                readButton.setEnabled(false);
                saveToButton.setEnabled(false);
                updateButton.setEnabled(false);
                eraseButton.setEnabled(false);
                fileButton.setEnabled(false);
                closePortButton.setEnabled(false);
                
                // Enable Open button
                //openButton.setEnabled(true);
                detectButton.setEnabled(true);
                
            } else {
                System.out.println("Can not close the port.");
            }
        } else {
            System.out.println("No COM port was opened.");
        }
    }//GEN-LAST:event_closePortButtonActionPerformed

    private void eraseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseButtonActionPerformed
        // TODO add your handling code here:
        byte[] byteArray = new byte[2];
        int myInt = 0;
        
        byteArray[0] = (byte) FWLOAD_PKT_SIGN_B0;
        byteArray[1] = 0x00;
        
        myInt = byteArray[1] & 0xFF;
        myInt |= ((byteArray[0] << 8) & 0xFFFF);
        jTextArea1.append(String.format("Constant value, hex =  %x; dec = %d\n", myInt, myInt));
        Path tempPath = Paths.get("tempLogRecord.txt");
        jTextArea1.append(tempPath.toAbsolutePath().toString());
        //readButton.setEnabled(true);
                
    }//GEN-LAST:event_eraseButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        // TODO add your handling code here:
        startLogging(outBuffer); // Send command to read log data
    }//GEN-LAST:event_readButtonActionPerformed

    private void detectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectButtonActionPerformed
        // TODO add your handling code here:
        ports = SerialPort.getCommPorts();
        jTextArea1.append(String.format("Number of ports detedted: %d COM ports.\n", ports.length));
        portsComboBox.removeAllItems();
        if(ports.length > 0){
            for (int k = 0; k < ports.length; k++) {
                portsComboBox.addItem(ports[k].getSystemPortName());
                jTextArea1.append(String.format("%s\n", ports[k].getDescriptivePortName()));
            }
            openButton.setEnabled(true);
        }
    }//GEN-LAST:event_detectButtonActionPerformed

    private void portsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsComboBoxActionPerformed
        // TODO add your handling code here:
        JComboBox cb = (JComboBox)evt.getSource();
        selectedPortName = (String)cb.getSelectedItem();
        //jTextArea1.append(String.format("Selected Port is: %s\n", selectedPortName));
        for (int k = 0; k < ports.length; k++) {
            // Search port index corresponding to port name selected
            if (ports[k].getSystemPortName().equals(selectedPortName)) {
                selectedPortIndex = k;
                //jTextArea1.append(String.format("Index found %d\n", k));
            }
        }
    }//GEN-LAST:event_portsComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mgds_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mgds_v1().setVisible(true);
                //mgds_v1().this.jTextArea1.append("Hello");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closePortButton;
    private javax.swing.JButton detectButton;
    private javax.swing.JButton eraseButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton openButton;
    private javax.swing.JComboBox portsComboBox;
    private javax.swing.JButton readButton;
    private javax.swing.JButton saveToButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    class MySaveFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "CSV files (*.csv)";
        }
    }
    
        class MyOpenFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.getAbsolutePath().endsWith(".bin");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Binary file (*.bin)";
        }
    }

    private final class PacketListener implements SerialPortPacketListener {

        @Override
        public int getListeningEvents() {
            return SerialPort.LISTENING_EVENT_DATA_RECEIVED;
        }

        @Override
        public int getPacketSize() {
            return FWLOAD_PKT_SIZE;
        }

        @Override
        public void serialEvent(SerialPortEvent event) {
            byte[] tempBuffer = event.getReceivedData();
            processRawPacket(tempBuffer);

            //   System.out.print((char)newData[i]);
            //System.out.println("\n");
        }
    }

    private void processRawPacket(byte[] data) {
        int packetType = -1;
        long packetReceived = -1;

        System.arraycopy(data, 0, procBuffer, 0, FWLOAD_PKT_SIZE);
        newPacket = false;
        packetType = procBuffer[2] & 0xFF;
        if (!(chkCsumFWLOAD(procBuffer) == FWLOAD_OK)) {
            // Invalid checksum, no process this packet
            jTextArea1.append(String.format("Invalid checksum on packet type: %x\n", packetType));
            return;
        }
        switch (packetType) {
            case FWLOAD_PACKET_DOWNLOAD_LOG_INFO_RESP:

                totalLogs = procBuffer[FWLOAD_PKT_TYPE_IDX + 5] & 0xFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 4] << 8) & 0x0000FFFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 3] << 16) & 0x00FFFFFF;
                totalLogs |= (procBuffer[FWLOAD_PKT_TYPE_IDX + 2] << 24) & 0xFFFFFFFF;
                jTextArea1.append(String.format("Total logs in device: %d\n", totalLogs));
                logReq = 0;
                // Send ack from current RESP and request FIRST log packet
                sendLogReq(outBuffer, logReq);
                break;

            case FWLOAD_PACKET_DOWNLOAD_LOG:
                // Convert and process log data packet
                packetReceived = processLogPacket(procBuffer);
                if(packetReceived == logReq){        
                    logReq++;
                }else{
                    logPacketErrorCounter++;
                }
                if (logReq <= totalLogs) {
                    //sendLogReq(outBuffer, logReq);
                    sendLogReq(outBuffer, logReq);
                } else {
                    // All logs have been read
                    totalLogs = -1;
                    
                }
                break;
        }
    }

    //--------------------------------------------------------------------------
    private void sendLogReq(byte[] buffer, long logNum) {

        clrPktFWLOAD(buffer);
        buffer[FWLOAD_PKT_TYPE_IDX] = (byte) FWLOAD_PACKET_DOWNLOAD_LOG_ACK;
        // Add requested Log packet number
        buffer[FWLOAD_PKT_TYPE_IDX + 1] = (byte) ((logNum >> 24) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 2] = (byte) ((logNum >> 16) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 3] = (byte) ((logNum >> 8) & 0xFF);
        buffer[FWLOAD_PKT_TYPE_IDX + 4] = (byte) (logNum & 0xFF);
        addCsumFWLOAD(buffer);
        if (openedPort >= 0) {
            if (ports[openedPort].isOpen()) {
                ports[openedPort].writeBytes(buffer, FWLOAD_PKT_SIZE);
            }else{
                jTextArea1.append(String.format("Not opened Port"));
            }
        }else{
            jTextArea1.append(String.format("Not valid Port"));
        }
    }
    
    //--------------------------------------------------------------------------
    private void startLogging(byte[] buffer){
        clrPktFWLOAD(buffer);
        buffer[FWLOAD_PKT_TYPE_IDX] = (byte) FWLOAD_PACKET_DOWNLOAD_LOG_INFO_REQ;
        addCsumFWLOAD(buffer);
        if (openedPort >= 0) {
            if (ports[openedPort].isOpen()) {
                ports[openedPort].writeBytes(buffer, FWLOAD_PKT_SIZE);
            }else{
                jTextArea1.append(String.format("Not opened Port"));
            }
        }else{
            jTextArea1.append(String.format("Not valid Port"));
        }        
    }

    //--------------------------------------------------------------------------
    private long processLogPacket(byte[] buffer) {
        
        // TODO: Add wrong packet arrived error handling
        byte[] rtcBytes = new byte[RTC_STRING_LENGTH];
        int batteryLevel = 0;
        int [] sensors = new int[9];
        int pressure = 0;
        int temperature = 0;
        double temperatureDouble = 0;
        int j,k;
        long packetLogNumber = -1;
        long errorCode = 0;
     
        System.arraycopy(buffer, FWLOAD_PKT_LOG_PAYLOAD_IDX, rtcBytes, 0, RTC_STRING_LENGTH);
        Charset charset = Charset.forName("US-ASCII");
        //try{
            String rtcString = new String(rtcBytes, charset);
        //}catch(UnsupportedEncodingException error){
        //   jTextArea1.append(String.format("%s\n", error));
        //}
        
        packetLogNumber = buffer[FWLOAD_PKT_LOG_PKT_NUM_IDX + 3]           & 0xFF;
        packetLogNumber |= (buffer[FWLOAD_PKT_LOG_PKT_NUM_IDX + 2] << 8)   & 0xFFFF;
        packetLogNumber |= (buffer[FWLOAD_PKT_LOG_PKT_NUM_IDX + 1] << 16)  & 0xFFFFFF;
        packetLogNumber |= (buffer[FWLOAD_PKT_LOG_PKT_NUM_IDX] << 24)      & 0xFFFFFFFF;
        
        batteryLevel = buffer[FWLOAD_PKT_LOG_BATTERY_IDX] & 0xFF;
        
        errorCode = buffer[FWLOAD_PKT_LOG_ERROR_IDX + 3]                    & 0xFF;
        errorCode |= (buffer[FWLOAD_PKT_LOG_ERROR_IDX + 2] << 8)            & 0xFFFF;
        errorCode |= (buffer[FWLOAD_PKT_LOG_ERROR_IDX + 1] << 16)           & 0xFFFFFF;
        errorCode |= (buffer[FWLOAD_PKT_LOG_ERROR_IDX] << 24)               & 0xFFFFFFFF;
        
        for (k = FWLOAD_PKT_LOG_SENSORS_IDX, j = 0; k < FWLOAD_PKT_LOG_PRESSURE_IDX; k = k + 2, j++){
            sensors[j] = (buffer[k+1]) & 0xFF;
            sensors[j] |= (buffer[k] << 8) & 0xFFFF;
        }
        
        pressure = buffer[FWLOAD_PKT_LOG_PRESSURE_IDX+1] & 0xFF;
        pressure |= (buffer[FWLOAD_PKT_LOG_PRESSURE_IDX] << 8 ) & 0xFFFF;
        
        temperature = buffer[FWLOAD_PKT_LOG_TEMPERATURE_IDX+1] & 0xFF;
        temperature |= (buffer[FWLOAD_PKT_LOG_TEMPERATURE_IDX] << 8) & 0xFFFF;
        
        temperatureDouble = temperature*0.1;
        // Write to CSV file
        if(packetLogNumber == 0){
            // Create a temporary file
            
            try{
                tempPath = Paths.get("tempLogRecord.txt");
                outputStream = new PrintWriter(Files.newBufferedWriter(tempPath, charset));
                
                tempPath2 = Paths.get("tempLogRecord2.txt");
                outputStream2 = new PrintWriter(Files.newBufferedWriter(tempPath2, charset));
                //BufferedWriter writer = Files.newBufferedWriter(tempPath, charset);
                //outputStream = new PrintWriter(new FileWriter("tempLogRecord.txt"));
                // Write headers
                
            }catch(IOException error){
                jTextArea1.append(String.format("%s\n", error));
            }
        }
        
        outputStream.format(recordFormat,rtcString, batteryLevel, errorCode, sensors[0],
        sensors[1], sensors[2], sensors[3], sensors[4], sensors[5], sensors[6],
        sensors[7], sensors[8], pressure, temperatureDouble);
        
/*        
        finally{
            if (outputStream != null) {
                outputStream.close();
            }            
        }
*/
        if(packetLogNumber == totalLogs){
            // Close File and mark that a new log is available for save to disk
            logAvailable = true;
            outputStream.close();
            saveToButton.setEnabled(true);
        }
        return packetLogNumber;
    }

    //--------------------------------------------------------------------------
    void clrPktFWLOAD(byte[] pkt_data) {
        int k;
        for (k = 0; k < (FWLOAD_PKT_SIZE); k++) {
            pkt_data[k] = 0x00;
        }
        // add packet sign - preambule
        pkt_data[0] = (byte) FWLOAD_PKT_SIGN_B0;
        pkt_data[1] = (byte) FWLOAD_PKT_SIGN_B1;
    }

    //--------------------------------------------------------------------------
    private int chkCsumFWLOAD(byte[] buff) {/// validate packet checksum 
        int k;
        byte[] csum = {0x00, 0x00};
        byte flag = 0x00;

        for (k = 0; k < ((FWLOAD_PKT_SIZE) - 2); k++) {
            csum[flag] ^= buff[k];
            flag ^= 0x01;
        }

        if ((csum[0] == buff[(FWLOAD_PKT_SIZE) - 2]) && (csum[1] == buff[(FWLOAD_PKT_SIZE) - 1])) {
            return (FWLOAD_OK);
        }

        return (FWLOAD_ERROR_CSUM);
    }

    //--------------------------------------------------------------------------    
    private void addCsumFWLOAD(byte[] pkt_data) {
        int k;
        pkt_data[(FWLOAD_PKT_SIZE) - 2] = 0x00;
        pkt_data[(FWLOAD_PKT_SIZE) - 1] = 0x00;

        for (k = 0; k < ((FWLOAD_PKT_SIZE) - 2); k += 2) {
            pkt_data[(FWLOAD_PKT_SIZE) - 2] ^= pkt_data[k];
            pkt_data[(FWLOAD_PKT_SIZE) - 1] ^= pkt_data[k + 1];
        }
    }
}
